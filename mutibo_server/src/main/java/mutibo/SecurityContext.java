package mutibo;

import mutibo.security.StatelessAuthenticationFilter;
import mutibo.security.TokenAuthenticationService;
import mutibo.security.UserDetailsService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

/**
 *
 * @author Redacted
 */

@EnableWebSecurity
@Configuration
@ComponentScan(basePackages = {"mutibo.security"})
@EnableGlobalMethodSecurity(prePostEnabled=true)
@Order(1)
public class SecurityContext extends WebSecurityConfigurerAdapter
{
	public SecurityContext()
	{
		super(true);
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception 
	{
		http
			.exceptionHandling().and()
			.anonymous().and()
			.servletApi().and()
			.headers().disable()
			.authorizeRequests()
			
			// allow anonymous resource requests
			.antMatchers("/").permitAll()
			.antMatchers("/favicon.ico").permitAll()
			.antMatchers("/*.html").permitAll()
			.antMatchers("/*.css").permitAll()
			.antMatchers("/js/**").permitAll()

			// allow anonymous access to the login controller
			.antMatchers("/login/**").permitAll()

			// all other request need to be authenticated 
			.anyRequest().hasRole("USER").and()

			// custom Token based authentication based on the header generated by the client
			.addFilterBefore(new StatelessAuthenticationFilter(tokenAuthenticationService), UsernamePasswordAuthenticationFilter.class)
		;
	}

	@Bean
	@Override
	public AuthenticationManager authenticationManagerBean() throws Exception 
	{
		return super.authenticationManagerBean();
	}

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception 
	{
		auth.userDetailsService(userDetailsService).passwordEncoder(new BCryptPasswordEncoder());
	}

	@Override
	protected UserDetailsService userDetailsService() 
	{
		return userDetailsService;
	}

	@Autowired
	private UserDetailsService userDetailsService;

	@Autowired
	private TokenAuthenticationService tokenAuthenticationService;
}
